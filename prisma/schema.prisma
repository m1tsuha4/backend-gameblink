// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String           @id @default(uuid())
  email     String           @unique
  password  String
  name      String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  role      UserRole         @default(ADMIN)
  blackList TokenBlacklist[]
}

enum UserRole {
  ADMIN
  SUPERADMIN
}

model TokenBlacklist {
  id        String   @id @default(uuid())
  token     String   @db.Text
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token(length: 255)])
}

enum Status {
  Aktif
  Tidak_Aktif @map("Tidak Aktif")
}

model Cabang {
  id            String         @id @default(uuid())
  nama_cabang   String         @unique
  alamat_cabang String
  imageCabang   String?
  status        Status         @default(Tidak_Aktif)
  Unit          Unit[]
  Ketersediaan  Ketersediaan[]
  Booking       Booking[]
}

model Unit {
  id                String         @id @default(uuid())
  cabang            Cabang?        @relation(fields: [cabang_id], references: [id], onDelete: Cascade)
  cabang_id         String?
  nama_unit         String
  jenis_konsol      String
  harga             Int
  Ketersediaan      Ketersediaan[]
  booking_details   BookingDetail[]
}

model Ketersediaan {
  id_ketersediaan        String   @id @default(uuid())
  cabang                 Cabang?  @relation(fields: [cabang_id], references: [id], onDelete: Cascade)
  cabang_id              String?
  unit                   Unit?    @relation(fields: [unit_id], references: [id], onDelete: Cascade)
  unit_id                String?
  tanggal_mulai_blokir   DateTime
  jam_mulai_blokir       String
  tanggal_selesai_blokir DateTime
  jam_selesai_blokir     String?
  keterangan             String
  status_perbaikan       StatusPerbaikan  @default(Pending)      
}

enum StatusPerbaikan {
  Selesai
  Pending
}

model Booking {
  id                    String @id @default(uuid())
  booking_code          String @unique
  nama                  String
  nomor_hp              String
  email                 String
  cabang                Cabang?  @relation(fields: [cabang_id], references: [id], onDelete: Cascade)
  cabang_id             String?
  tanggal_main          DateTime
  tanggal_transaksi     DateTime
  metode_pembayaran     String?
  total_harga           Int
  status_pembayaran     StatusPembayaran @default(Pending)
  status_booking        StatusBooking
  booking_details       BookingDetail[]
}

model BookingDetail {
  id          String  @id @default(uuid())
  booking_id  String
  unit_id     String
  jam_main    String
  harga       Int
  tanggal     DateTime
  booking     Booking @relation(fields: [booking_id], references: [id], onDelete: Cascade)
  unit        Unit    @relation(fields: [unit_id], references: [id], onDelete: Cascade)
}

enum StatusPembayaran {
  Berhasil
  Gagal
  Pending
}

enum StatusBooking {
  Aktif
  Selesai
  Dibatalkan
}
